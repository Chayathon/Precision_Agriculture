generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model role {
  id        Int    @id @default(autoincrement())
  role_name String
  users     user[]
}

model province {
  province_id Int        @id
  name_th     String?    @db.VarChar(120)
  name_en     String?    @db.VarChar(120)
  districts   district[]
  user        user[]
}

model district {
  district_id  Int           @id
  province_id  Int
  name_th      String?       @db.VarChar(120)
  name_en      String?       @db.VarChar(120)
  provinceRel  province      @relation(fields: [province_id], references: [province_id])
  subdistricts subdistrict[]
  user         user[]

  @@index([province_id])
}

model subdistrict {
  subdistrict_id Int      @id
  district_id    Int
  name_th        String?  @db.VarChar(120)
  name_en        String?  @db.VarChar(120)
  lat            Decimal? @db.Decimal(9, 6)
  long           Decimal? @db.Decimal(9, 6)
  zipcode        Int?
  districtRel    district @relation(fields: [district_id], references: [district_id])
  user           user[]

  @@index([district_id])
}

model user {
  id                Int               @id @default(autoincrement())
  firstname         String
  lastname          String
  email             String            @unique
  tel               String
  address           String
  province          Int
  district          Int
  subdistrict       Int
  username          String
  password          String
  role_id           Int
  otp               Int?
  isVerified        Boolean           @default(false)
  verificationToken String?
  plant             plant[]
  plant_avaliable   plant_avaliable[]
  districtRel       district          @relation(fields: [district], references: [district_id])
  provinceRel       province          @relation(fields: [province], references: [province_id])
  role              role              @relation(fields: [role_id], references: [id])
  subdistrictRel    subdistrict       @relation(fields: [subdistrict], references: [subdistrict_id])

  @@index([role_id])
  @@index([province])
  @@index([district])
  @@index([subdistrict])
}

model plant_avaliable {
  id        Int          @id @default(autoincrement())
  plantname String
  user_id   Int
  factors   p_factor[]
  nutrients p_nutrient[]
  plant     plant[]
  user      user         @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("plant_available")
}

model p_other_nutrient {
  id         Int   @id @default(autoincrement())
  plant_id   Int
  age        Int
  nitrogen   Float
  phosphorus Float
  potassium  Float
  plant      plant @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@index([plant_id])
}

model p_other_factor {
  id             Int   @id @default(autoincrement())
  plant_id       Int
  age            Int
  pH             Float
  temperature    Float
  humidity       Float
  salinity       Float
  lightIntensity Float
  plant          plant @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@index([plant_id])
}

model plant {
  id                 Int                @id @default(autoincrement())
  plantname          String
  plantedAt          DateTime
  latitude           Float?
  longitude          Float?
  user_id            Int
  plant_avaliable_id Int
  p_other_factors    p_other_factor[]
  p_other_nutrients  p_other_nutrient[]
  variables          p_variable[]
  plant_avaliable    plant_avaliable    @relation(fields: [plant_avaliable_id], references: [id])
  user               user               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([plant_avaliable_id])
  @@index([user_id])
}

model p_nutrient {
  id             Int             @id @default(autoincrement())
  nitrogen       Float
  phosphorus     Float
  potassium      Float
  plant_id       Int
  age            Int
  plant_avaiable plant_avaliable @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@index([plant_id])
}

model p_factor {
  id             Int             @id @default(autoincrement())
  pH             Float
  temperature    Float
  humidity       Float
  lightIntensity Float
  salinity       Float
  plant_id       Int
  age            Int
  plant_avaiable plant_avaliable @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@index([plant_id])
}

model p_variable {
  id             Int      @id @default(autoincrement())
  plant_id       Int
  receivedAt     DateTime @default(now())
  nitrogen       Float
  phosphorus     Float
  potassium      Float
  pH             Float
  temperature    Float
  humidity       Float
  lightIntensity Float
  salinity       Float
  plant          plant    @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@index([plant_id])
}
